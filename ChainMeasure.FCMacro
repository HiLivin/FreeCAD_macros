"""
This macro creates chain measurements, as it aligns all distances to the same coordinate
It also re-centers the distance value.
If only a single distance measure is given, it will only be re-centered.

The first Dimension selected will be the reference.

All Y distances will be aligned by their X coordinate,
all X distances will be aligned by their Y coordinate.

Other distance measures do not work.


Copyright (c) 2019, Sebastian Bachmann <hello@reox.at>

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

from PySide.QtGui import QMessageBox
from PySide import QtCore


def msg(title, message):
    diag = QMessageBox(QMessageBox.Warning, title, message)
    diag.setWindowModality(QtCore.Qt.ApplicationModal)
    diag.exec_()


def center_coord(dim):
    """
    Returns the center of the dimension.
    For DimensionY, the Y coordinate is returned,
    for DimensionX the X coordinate.
    """
    a, b = dim.getLinearPoints()
    c = (a + b) / 2.0
    if dim.Type == 'DistanceY':
        # need to transform the coordinate system on y only
        return -c.y
    return c.x


def main():
    sel = FreeCADGui.Selection.getSelection()

    if len(sel) == 0:
        # Do nothing
        return

    if not all(map(lambda x: x.isDerivedFrom("TechDraw::DrawViewDimension"), sel)):
        msg("Error", "You need to only select DrawViewDimensions!")
        return

    reference = next(iter(sel))

    if reference.Type not in ("DistanceX", "DistanceY"):
        msg("Error", "The dimension must be DimensionX or DimensionY!")
        return

    if not all(map(lambda x: x.Type == reference.Type, sel)):
        msg("Error", "All dimensions must have the same type as the first selected")
        return

    for s in sel:
        if reference.Type == "DistanceY":
            s.X = reference.X
            s.Y = center_coord(s)
        else:
            s.Y = reference.Y
            s.X = center_coord(s)


if __name__ == "__main__":
    main()
